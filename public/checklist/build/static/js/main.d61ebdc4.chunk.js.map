{"version":3,"sources":["components/Calendar.jsx","components/Fish.jsx","components/Fishies.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","month","height","inactive","backgroundColor","current","outline","outlineOffset","Calendar","props","activeMonths","currentMonth","classes","Grid","container","className","spacing","map","value","active","includes","classNames","key","item","Paper","square","outlined","padding","title","marginTop","complete","Fish","name","index","isDonated","isHoarded","northernMonths","time","toggleAccumulation","Date","getMonth","isActive","rootClasses","Card","CardContent","style","display","Chip","color","icon","label","Divider","variant","cellHeight","cols","justify","CardActions","FormGroup","row","FormControlLabel","control","Checkbox","data-id","checked","onChange","e","Fishies","state","isLoading","fishies","bind","mergeSavedData","fetch","response","json","sort","a","b","fishA","toUpperCase","fishB","comparison","this","setState","localStorage","window","JSON","parse","getItem","prop","id","target","parentNode","dataset","savedData","getSavedData","setItem","stringify","newFishies","fish","savedFishData","LinearProgress","FishList","xs","flexGrow","Component","App","CssBaseline","Container","maxWidth","Typography","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d61ebdc4.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AlarmOnIcon from '@material-ui/icons/AlarmOn';\nimport {\n  Grid,\n  Paper,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 120,\n  },\n  month: {\n    width: 30,\n    height:20,\n  },\n  inactive: {\n    backgroundColor: '#949494',\n  },\n  current: {\n    outline: '2px solid #444',\n    outlineOffset: -2\n  }\n});\n\nexport default function Calendar(props) {\n  const { activeMonths, currentMonth } = props;\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root} spacing={0}>\n\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(value => {\n            const active = activeMonths.includes(value);\n            const current = value === currentMonth;\n            let classNames = classes.month;\n            classNames = active ? classes.month : `${classes.month} ${classes.inactive}`;\n            classNames = current ? `${classNames} ${classes.current}` : classNames;\n            return (\n              <Grid key={value} item>\n                <Paper className={classNames} square outlined>\n                  {value}\n                </Paper>\n              </Grid>\n            );\n          })}\n\n    </Grid>\n  );\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AlarmOnIcon from '@material-ui/icons/AlarmOn';\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Checkbox,\r\n  Chip,\r\n  Divider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Grid,\r\n} from '@material-ui/core';\r\nimport Calendar from './Calendar';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 350,\r\n    padding: 0,\r\n  },\r\n\r\n  title: {\r\n    marginTop: 0,\r\n  },\r\n  complete: {\r\n    backgroundColor: '#e7ffc9',\r\n  },\r\n});\r\n\r\nexport default function Fish(props) {\r\n\r\n  const classes = useStyles();\r\n  const { name, index, isDonated, isHoarded, northernMonths, time, toggleAccumulation } = props;\r\n  const today = new Date();\r\n  const currentMonth = today.getMonth() + 1;\r\n  const isActive = northernMonths.includes(currentMonth);\r\n  const complete = isDonated && isHoarded;\r\n\r\n  let rootClasses = classes.root;\r\n  rootClasses = complete ? `${rootClasses} ${classes.complete}` : rootClasses;\r\n  return (\r\n    <Card className={rootClasses}>\r\n      <CardContent>\r\n        <div style={{display: 'flex'}}>\r\n          <h3 className={classes.title}>{name}</h3>\r\n          <div style={{'margin-left': 'auto'}}>\r\n          {isActive && <Chip color=\"secondary\" icon={<AlarmOnIcon />} label={\"Available Today!\"}/>}\r\n          </div>\r\n        </div>\r\n        <Divider variant=\"inset\"  />\r\n        <Grid container cellHeight={160} cols={2} spacing={2} justify=\"center\" style={{'margin-top': '10px'}}>\r\n          <Grid item justify=\"center\">\r\n            <span>{time}</span>\r\n          </Grid>\r\n          <Grid item justify=\"center\">\r\n            <Calendar currentMonth={currentMonth} activeMonths={northernMonths} />\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </CardContent>\r\n      <CardActions style={{'background-color': '#f0f0f0'}}>\r\n        <FormGroup row>\r\n          <FormControlLabel\r\n            control={<Checkbox\r\n              data-id={index}\r\n              checked={isDonated}\r\n              color=\"primary\"\r\n              onChange={(e) => toggleAccumulation(e, 'isDonated')}\r\n              name=\"Donated\"\r\n            />}\r\n            label=\"Donated\"\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox\r\n              data-id={index}\r\n              checked={isHoarded}\r\n              color=\"primary\"\r\n              onChange={(e) => toggleAccumulation(e, 'isHoarded')}\r\n              name=\"Hoarded\"\r\n            />}\r\n            label=\"Hoarded\"\r\n          />\r\n        </FormGroup>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Grid,\r\n  LinearProgress,\r\n} from '@material-ui/core';\r\nimport Fish from './Fish';\r\n\r\nconst storageKey = 'greg-acnh-fish';\r\nclass Fishies extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    fishies: []\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggleAccumulation = this.toggleAccumulation.bind(this);\r\n    this.mergeSavedData = this.mergeSavedData.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const response = await fetch('/fish');\r\n    let fishies = await response.json();\r\n    fishies = fishies.sort((a, b) => {\r\n      // Use toUpperCase() to ignore character casing\r\n      const fishA = a.name.toUpperCase();\r\n      const fishB = b.name.toUpperCase();\r\n\r\n      let comparison = 0;\r\n      if (fishA > fishB) {\r\n        comparison = 1;\r\n      } else if (fishA < fishB) {\r\n        comparison = -1;\r\n      }\r\n      return comparison;\r\n    });\r\n    this.setState({ fishies });\r\n    this.mergeSavedData();\r\n  }\r\n\r\n  getSavedData() {\r\n    const localStorage = window && window.localStorage;\r\n    if (localStorage) {\r\n      return JSON.parse(localStorage.getItem(storageKey)) || {};\r\n    }\r\n    // No LocalStorage, so nothing will work\r\n    return {};\r\n  }\r\n\r\n  toggleAccumulation(e, prop) {\r\n    const id = e.target.parentNode.parentNode.dataset.id;\r\n    const savedData = this.getSavedData();\r\n    if (savedData[id]) {\r\n      savedData[id][prop] = !savedData[id][prop];\r\n    } else {\r\n      savedData[id] = {}\r\n      savedData[id][prop] = true;\r\n    }\r\n    localStorage.setItem(storageKey,  JSON.stringify(savedData));\r\n    this.mergeSavedData();\r\n  }\r\n\r\n  mergeSavedData()\r\n  {\r\n    const { fishies } = this.state;\r\n    const savedData = this.getSavedData();\r\n\r\n    const newFishies = fishies.map((fish) => {\r\n      const container = fish;\r\n      const savedFishData = savedData[fish.index];\r\n      if (savedFishData)\r\n      {\r\n        container.isDonated = savedFishData.isDonated;\r\n        container.isHoarded = savedFishData.isHoarded;\r\n      }\r\n      return container;\r\n    });\r\n\r\n    this.setState({ fishies: newFishies, isLoading: false });\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, fishies } = this.state;\r\n    if (isLoading) {\r\n      return <LinearProgress variant=\"query\" />;\r\n    }\r\n\r\n    const FishList = fishies.map((fish) =>\r\n      <Grid item xs key={fish.index}>\r\n        <Fish {...fish} toggleAccumulation={this.toggleAccumulation} />\r\n      </Grid>\r\n    );\r\n\r\n    return (\r\n      <div style={{flexGrow: 1}}>\r\n        <Grid container spacing={3}>\r\n          {FishList}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fishies;\r\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\nimport Fishies from './components/Fishies';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <h1>Fishies!!</h1>\n      <Container maxWidth=\"lg\">\n        <Typography component={Fishies} style={{ backgroundColor: '#cfe8fc', height: '100vh' }} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}